basePath: /api/v1
definitions:
  models.CreateUserRequest:
    properties:
      age:
        example: 30
        maximum: 120
        minimum: 1
        type: integer
      email:
        example: john@example.com
        type: string
      name:
        example: John Doe
        type: string
    required:
    - email
    - name
    type: object
  models.ErrorResponse:
    properties:
      error:
        example: Detailed error message
        type: string
      message:
        example: Operation failed
        type: string
      success:
        example: false
        type: boolean
    type: object
  models.Response:
    properties:
      data: {}
      message:
        example: Operation completed successfully
        type: string
      success:
        example: true
        type: boolean
    type: object
  models.UpdateUserRequest:
    properties:
      age:
        example: 25
        maximum: 120
        minimum: 1
        type: integer
      email:
        example: jane@example.com
        type: string
      name:
        example: Jane Doe
        type: string
    type: object
  models.User:
    properties:
      age:
        example: 30
        type: integer
      created_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      email:
        example: john@example.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: John Doe
        type: string
      updated_at:
        example: "2024-01-01T12:00:00Z"
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: REST API для управления пользователями с использованием Go, Gin, GORM
    и PostgreSQL
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  termsOfService: http://swagger.io/terms/
  title: Go API Project
  version: "1.0"
paths:
  /users:
    get:
      consumes:
      - application/json
      description: Возвращает список всех пользователей
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.User'
                  type: array
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Получить всех пользователей
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Создает нового пользователя с указанными данными
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Создать нового пользователя
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Удаляет пользователя по указанному ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Удалить пользователя
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Возвращает пользователя по указанному ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Получить пользователя по ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Обновляет данные пользователя по указанному ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Updated user data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/models.Response'
            - properties:
                data:
                  $ref: '#/definitions/models.User'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/models.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.ErrorResponse'
      summary: Обновить пользователя
      tags:
      - users
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
